import { checkProductionData } from "../modules/dataCheck.js";

let accessToken = null;
const SCOPES = "https://www.googleapis.com/auth/spreadsheets";
import { CLIENT_ID } from "./config.js";

let tokenClient;

export function initGoogleAuth() {
    console.log("üîÑ Inicializuji Google OAuth...");

    tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: "https://www.googleapis.com/auth/spreadsheets",
        callback: (response) => {
            if (response.error) {
                console.error("‚ùå Chyba p≈ôihl√°≈°en√≠:", response);
                return {
                    message: "Nepoda≈ôilo se p≈ôihl√°sit: " + response.error,
                    severity: "urgent"
                };
            }
            console.log("‚úÖ P≈ôihl√°≈°eno, token z√≠sk√°n:", response.access_token);
            localStorage.setItem("accessToken", response.access_token);
            return checkProductionData();
        }
    });
}

// Funkce pro vynucen√≠ nov√©ho tokenu
function refreshAccessToken() {
    console.log("üîÑ ≈Ω√°d√°m o nov√Ω p≈ô√≠stupov√Ω token...");
    return new Promise((resolve, reject) => {
        tokenClient.requestAccessToken({
            prompt: "", // Umo≈æn√≠ zobrazen√≠ p≈ôihla≈°ovac√≠ho dialogu
            callback: (response) => {
                if (response.error) {
                    console.error("‚ùå Chyba p≈ôi z√≠sk√°n√≠ nov√©ho tokenu:", response);
                    reject(new Error("Nepoda≈ôilo se z√≠skat nov√Ω token: " + response.error));
                    return;
                }
                console.log("‚úÖ Nov√Ω token z√≠sk√°n:", response.access_token);
                localStorage.setItem("accessToken", response.access_token);
                resolve(response.access_token);
            }
        });
    });
}

// Funkce pro ovƒõ≈ôen√≠ tokenu a spu≈°tƒõn√≠ "kontrola dat"
async function signInAndRunCheck() {
    console.log("üîÑ Spou≈°t√≠m signInAndRunCheck()...");

    let token = getAccessToken();

    if (token) {
        console.log("üîë P≈ô√≠stupov√Ω token ji≈æ existuje:", token);

        try {
            const response = await fetch("https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + token);
            const data = await response.json();
            if (data.error) {
                console.warn("‚ö†Ô∏è Token je neplatn√Ω, obnovuji...");
                // Vyma≈æeme neplatn√Ω token
                localStorage.removeItem("accessToken");
                token = await refreshAccessToken();
                return await checkProductionData();
            } else {
                console.log("‚úÖ Token je platn√Ω, pokraƒçuji...");
                return await checkProductionData();
            }
        } catch (error) {
            console.error("‚ùå Chyba p≈ôi ovƒõ≈ôov√°n√≠ tokenu:", error);
            // Vyma≈æeme neplatn√Ω token a zkus√≠me obnovit
            localStorage.removeItem("accessToken");
            try {
                token = await refreshAccessToken();
                return await checkProductionData();
            } catch (refreshError) {
                return {
                    message: "Chyba p≈ôi obnovƒõ tokenu, pros√≠m p≈ôihlaste se: " + refreshError.message,
                    severity: "urgent"
                };
            }
        }
    } else {
        console.log("‚ö†Ô∏è ≈Ω√°dn√Ω token, ≈æ√°d√°m o nov√Ω...");
        try {
            token = await refreshAccessToken();
            return await checkProductionData();
        } catch (error) {
            return {
                message: "Chyba p≈ôi z√≠sk√°n√≠ tokenu, pros√≠m p≈ôihlaste se: " + error.message,
                severity: "urgent"
            };
        }
    }
}

// Funkce pro z√≠sk√°n√≠ tokenu z localStorage
export function getAccessToken() {
    return localStorage.getItem("accessToken") || null;
}

export { signInAndRunCheck, refreshAccessToken };