import { checkProductionData } from "../modules/dataCheck.js";

export const updateRange = "'Data'!A1:Q3"; // ‚úÖ Spr√°vn√Ω list

let accessToken = null;
const SCOPES = "https://www.googleapis.com/auth/spreadsheets";
import { CLIENT_ID } from "./config.js"; // ‚úÖ Import CLIENT_ID z config.js

let tokenClient; // üü¢ Deklarujeme glob√°lnƒõ, ale inicializujeme a≈æ v `initGoogleAuth()`

export function initGoogleAuth() {
    console.log("üîÑ Inicializuji Google OAuth...");

    tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: "https://www.googleapis.com/auth/spreadsheets", // ‚úÖ Opr√°vnƒõn√≠ pro z√°pis do Sheets
        callback: (response) => {
            if (response.error) {
                console.error("‚ùå Chyba p≈ôihl√°≈°en√≠:", response);
                return;
            }
            console.log("‚úÖ P≈ôihl√°≈°eno, token z√≠sk√°n:", response.access_token);
            localStorage.setItem("accessToken", response.access_token);
            checkProductionData(); // ‚úÖ Po z√≠sk√°n√≠ tokenu spust√≠me kontrolu dat
        }
    });
}

// üîÑ Funkce pro vynucen√≠ nov√©ho tokenu
function refreshAccessToken() {
    console.log("üîÑ ≈Ω√°d√°m o nov√Ω p≈ô√≠stupov√Ω token...");
    tokenClient.requestAccessToken({
        prompt: "consent", // üü¢ Nut√≠ u≈æivatele schv√°lit opr√°vnƒõn√≠ znovu
        callback: (response) => {
            if (response.error) {
                console.error("‚ùå Chyba p≈ôi z√≠sk√°n√≠ nov√©ho tokenu:", response);
                return;
            }
            console.log("‚úÖ Nov√Ω token z√≠sk√°n:", response.access_token);
            localStorage.setItem("accessToken", response.access_token);
            checkProductionData(); // üü¢ Po z√≠sk√°n√≠ tokenu spust√≠me kontrolu dat
        }
    });
}

// üîç Funkce pro ovƒõ≈ôen√≠ tokenu a spu≈°tƒõn√≠ "kontrola dat"
function signInAndRunCheck() {
    console.log("üîÑ Spou≈°t√≠m signInAndRunCheck()...");

    const token = getAccessToken();

    if (token) {
        console.log("üîë P≈ô√≠stupov√Ω token ji≈æ existuje:", token);

        // üü¢ Ovƒõ≈ô√≠me platnost tokenu
        fetch("https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + token)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.warn("‚ö†Ô∏è Token je neplatn√Ω, obnovuji...");
                    refreshAccessToken(); // üîÑ Pokud je token neplatn√Ω, z√≠sk√°me nov√Ω
                } else {
                    console.log("‚úÖ Token je platn√Ω, pokraƒçuji...");
                    checkProductionData(); // ‚úÖ Pokud je token platn√Ω, spust√≠me kontrolu dat
                }
            })
            .catch(error => console.error("‚ùå Chyba p≈ôi ovƒõ≈ôov√°n√≠ tokenu:", error));
    } else {
        console.log("‚ö†Ô∏è ≈Ω√°dn√Ω token, ≈æ√°d√°m o nov√Ω...");
        refreshAccessToken();
    }
}

// üü¢ Funkce pro z√≠sk√°n√≠ tokenu z localStorage
export function getAccessToken() {
    return localStorage.getItem("accessToken") || null;
}

export { signInAndRunCheck, refreshAccessToken };
