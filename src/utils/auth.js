// src/utils/auth.js
import { CLIENT_ID, SCOPES } from "./config.js";

let tokenClient;
let accessToken = null;

export function initGoogleAuth() {
    console.log("üîÑ Inicializuji Google Identity Services...");
    try {
        tokenClient = google.accounts.oauth2.initTokenClient({
            client_id: CLIENT_ID,
            scope: SCOPES,
            callback: (response) => {
                if (response.error) {
                    console.error("‚ùå Chyba p≈ôi inicializaci GIS:", response.error);
                    throw new Error(response.error);
                }
                accessToken = response.access_token;
                console.log("‚úÖ P≈ô√≠stupov√Ω token z√≠sk√°n:", accessToken);
            },
        });
        console.log("‚úÖ GIS inicializov√°no");
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi inicializaci GIS:", error);
        throw error;
    }
}

export function requestAccessToken() {
    console.log("üîë Po≈æaduji p≈ô√≠stupov√Ω token...");
    if (!tokenClient) {
        throw new Error("GIS nen√≠ inicializov√°no");
    }
    tokenClient.requestAccessToken();
}

export function getAccessToken() {
    console.log("üîë Z√≠sk√°v√°m p≈ô√≠stupov√Ω token...");
    if (!accessToken) {
        console.log("‚ö†Ô∏è Token nen√≠ dostupn√Ω, po≈æaduji nov√Ω...");
        requestAccessToken();
        return null; // Token bude nastaven asynchronnƒõ v callbacku
    }
    console.log("‚úÖ P≈ô√≠stupov√Ω token vr√°cen:", accessToken);
    return accessToken;
}

export async function signInAndRunCheck() {
    console.log("üîç Spou≈°t√≠m p≈ôihl√°≈°en√≠ a kontrolu...");
    try {
        requestAccessToken();
        // Poƒçk√°me, a≈æ bude token dostupn√Ω (asynchronn√≠ callback)
        const token = await new Promise((resolve) => {
            const checkToken = setInterval(() => {
                if (accessToken) {
                    clearInterval(checkToken);
                    resolve(accessToken);
                }
            }, 100);
        });
        console.log("‚úÖ P≈ôihl√°≈°en√≠ a kontrola √∫spƒõ≈°n√°, token:", token);
        return token;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ a kontrole:", error);
        throw error;
    }
}